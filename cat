#include <getopt.h>
#include <stdio.h>
#include <unistd.h>

const struct options_struct {
  int b;
  int e;
  int n;
  int s;
  int t;
  int v;
} some_name;

int parse_flags(int argc, char *argv[], struct options_struct *options);
void parsingFile(int argc, char *argv[], struct options_struct options);
void openfile(char *fileName, struct options_struct options);

int main(int argc, char *argv[]) {
  struct options_struct options = {0};
  int count_flag = parse_flags(argc, argv, &options);
  if (count_flag != -1) {
    parsingFile(argc, argv, options);
  }
  return 0;
}

int parse_flags(int argc, char *argv[], struct options_struct *options) {
  int rez;
  int option_index = -1;

  const char *short_options = "benstTE";

  struct option long_options[] = {{"number-nonblank", no_argument, NULL, 'b'},
                                  {"number", no_argument, NULL, 'n'},
                                  {"squeeze-blank", no_argument, NULL, 's'},
                                  {NULL, 0, NULL, 0}

  };

  while ((rez = getopt_long(argc, argv, short_options, long_options,
                            &option_index)) != -1) {
    switch (rez) {
      case 'b': {
        options->b = 1;
        break;
      };
      case 'n': {
        options->n = 1;

        break;
      };

      case 's': {
        options->s = 1;

        break;
      };
      case 't': {
        options->t = 1;
        options->v = 1;
        break;
      };
      case 'T': {
        options->t = 1;
        break;
      };
      case 'E': {
        options->e = 1;

        break;
      };
      case 'e': {
        options->e = 1;
        options->v = 1;
        break;
      };
      case '?':
      default: {
        printf("found unknown option\n");
        break;
      };
    };
    option_index = -1;
  };
  return 0;
}
void parsingFile(int argc, char *argv[], struct options_struct options) {
  for (int i = 1; i < argc; ++i) {
    if (argv[i][0] != '-') {
      openfile(argv[i], options);
    }
  }
}
void openfile(char *fileName, struct options_struct options) {
  FILE *file = fopen(fileName, "rt");

  if (file == NULL) {
    printf("cat: %s: No such file or directory\n", fileName);
    return;
  }
  char c;
  int newLine = 1, count = 1, second_line = 1, thirdLine = 0, non_SOS_J = 0;
  c = fgetc(file);
  while (!feof(file)) {
    if (options.s == 1 && newLine && c == '\n') {
      if (thirdLine) {
        thirdLine = -1;
      }
    }
    if (options.n == 1 && newLine && options.b != 1) {
      if (thirdLine != -1) {
        printf("%6d\t", count++);
      }
    }
    if (options.b == 1 && newLine && c != '\n') {
      printf("%6d\t", count++);
    }
    if (options.e == 1 && c == '\n') {
      if (thirdLine != -1) {
        printf("$");
      }
    }
    if (options.v == 1) {
      int ch = (int)c;
      if (c < 0) {
        c &= 127;
        ch = (int)c;
        ch += 128;
      }
      if (ch != 9 && ch != 10 && ch < 32) {
        printf("^");
        c += 64;
      } else if (ch == 127) {
        printf("^");
        c = '?';
      } else if (ch > 127 && ch < 160) {
        printf("M-^");
        c = ch - 64;
        if (c == 'J' && (options.b || options.n)) {
          printf("%c", c);
          printf("%6d\t", count);
          count += 1;
          non_SOS_J = 1;
        }
      } else if (ch > 160 && ch <= 255) {
        c -= 128;
      }
    }
    if (options.t == 1 && c == '\t') {
      printf("^");
      c = 'I';
    }
    if (thirdLine != -1 && non_SOS_J != 1) {
      printf("%c", c);
    }
    newLine = (c == '\n') ? 1 : 0;
    thirdLine = (second_line && c == '\n') ? 1 : 0;
    second_line = (newLine && c == '\n') ? 1 : 0;
    non_SOS_J = 0;
    c = fgetc(file);
  }
  fclose(file);
}
